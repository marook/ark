#!/usr/bin/python2
# -*-Python-*-

import argparse
import json
import os
import subprocess

def main():
    args = parse_args()

    root_command = args.command[0]
    if(root_command == 'clone'):
        execute_clone(args)
    elif(root_command == 'push'):
        execute_push(args)
    else:
        fail('Unknown command: %s' % (root_command, ))

def parse_args():
    p = argparse.ArgumentParser(description='Pull and push files via camlistore.')
    p.add_argument('command', nargs='+')

    return p.parse_args()

def execute_clone(args):
    permanodeRef = args.command[1] if len(args.command) > 1 else None
    argCloneName = args.command[2] if len(args.command) > 2 else None

    meta = camtool('describe', permanodeRef)['meta']
    blobRef = meta[permanodeRef]['permanode']['attr']['camliContent']

    blob = camget(blobRef)

    if(blob['camliType'] == 'directory'):
        cloneName = argCloneName if not argCloneName is None else blob['fileName']
        print 'Cloning %s...' % (cloneName,)
        camget('-o', cloneName, blobRef)
        write_ark_config(os.path.join(cloneName, '.ark'), {
            'permanode': permanodeRef,
            'blob': blobRef,
            'cloneName': blob['fileName'],
        })
    else:
        fail('Unknown blob camliType: %s' % (blob['camliType'], ))

def execute_push(args):
    config = read_ark_config('.')

    blobRef = camput('file', config['cloneName'])
    camput('attr', config['permanode'], 'camliContent', blobRef)

    config['blob'] = blobRef
    update_ark_config('.', config)

    print 'Pushed %s' % (blobRef, )

def camget(*args):
    args_list = list(args)
    args_list.insert(0, 'camget')
    return camexec(*args_list)

def camput(*args):
    args_list = list(args)
    args_list.insert(0, 'camput')
    return subprocess.check_output(args_list).strip()

def camtool(*args):
    args_list = list(args)
    args_list.insert(0, 'camtool')
    return camexec(*args_list)

def camexec(*args):
    out = subprocess.check_output(args)
    if(out == ''):
        return None
    return json.loads(out)

def read_ark_config(cwd):
    ark_config_path = os.path.join(find_ark_dir(cwd), 'config')

    with open(ark_config_path, 'r') as f:
        return json.load(f)

def update_ark_config(cwd, ark_config):
    ark_path = find_ark_dir(cwd)

    write_ark_config(ark_path, ark_config)

def find_ark_dir(cwd):
    former_path = cwd

    while True:
        ark_dir_path = os.path.join(cwd, '.ark')
        if(os.path.exists(ark_dir_path)):
            return ark_dir_path

        dir_path = os.path.basename(cwd)
        if(dir_path == former_path):
            raise Exception('Not an ark repository')

        former_path = cwd

def write_ark_config(ark_dir, ark_config):
    config_file_path = os.path.join(ark_dir, 'config')
    config_file_dir = os.path.dirname(config_file_path)

    if(not os.path.exists(config_file_dir)):
        os.makedirs(config_file_dir)

    with open(config_file_path, 'w') as f:
        json.dump(ark_config, f)

def fail(msg):
    print msg
    exit(1)

main()
